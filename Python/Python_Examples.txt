################################
##----------CODE ACADEMY--------
##----------Python Examples-----
################################

#########################################
#------ Lesson: A Day At the Supermarket
#########################################

#########
#~~~3/13: Control Flow and Looping
#######################################
a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
even_list = []
#i = 0
for even in a:
    if even % 2 == 0:
        # "Even number in a is: %i" %even
        # "Len of list %i" %len(even_list)
        # CANNONT DO: even_list[i] = even
        # CANNOT DO: i = i + 1
        # even_list.append(even) //*If you want to save all the evens in a list
        print even
#print even_list //*If you want to save all the evens in a list

#########
#~~~4/13: Lists + Functions
#######################################
My Task)
Write a function that counts how many times the string "fizz" appears in a list.

Write a function called fizz_count that takes a list x as input.
Create a variable count to hold the ongoing count. Initialize it to zero.
for each item in x:, if that item is equal to the string "fizz" then increment the count variable.
After the loop, please return the count variable.
For example, fizz_count(["fizz","cat","fizz"]) should return 2.
---------------------------------------------------------------------------
# Write your function below!
def fizz_count(x):
    count = 0 #Initialize count to zero
    for item in x:
        if item == "fizz":
            count = count + 1
    return count

print fizz_count(["fizz","cat","fizz"])
# Returned 2

#########
#~~~9/13: Shopping at the Market
#######################################
# Dictionary of Prices
prices = {
    "banana": 4,
    "apple": 2,
    "orange": 1.5,
    "pear": 3
}

# Dictionary of Stock
stock = {
    "banana": 6,
    "apple": 0,
    "orange": 32,
    "pear": 15
}

## Since both dictionaries have the same keys, we can loop through
## one dictionary and show values from both of them.
# Loop through each key and list the price and stock amount

for key in prices.keys():
    print key #key name
    print "price: %s" % prices[key] #price
    print "stock: %s" % stock[key] #stock

#Total Value of inventory
total = 0
for key in prices:
    total = total + (prices[key] * stock[key])

print total

############################################
#------ Lesson: Student Becomes the Teacher
############################################
 
#########
#~~~6/9: How to continue on the next line
####################################### 
cost = {
    "apples": [3.5, 2.4, 2.3],
    "bananas": [1.2, 1.8],
}

return 0.9 * average(cost["apples"]) + \
0.1 * average(cost["bananas"])

The \ character is a continuation character. 
The following line is considered a continuation of the current line.

#########
#~~~9/9: Student Becomes the Teacher
####################################### 
lloyd = {
    "name": "Lloyd",
    "homework": [90.0, 97.0, 75.0, 92.0],
    "quizzes": [88.0, 40.0, 94.0],
    "tests": [75.0, 90.0]
}
alice = {
    "name": "Alice",
    "homework": [100.0, 92.0, 98.0, 100.0],
    "quizzes": [82.0, 83.0, 91.0],
    "tests": [89.0, 97.0]
}
tyler = {
    "name": "Tyler",
    "homework": [0.0, 87.0, 75.0, 22.0],
    "quizzes": [0.0, 75.0, 78.0],
    "tests": [100.0, 100.0]
}


# Add your function below!
def average(lst):
    size = len(lst)
    total = 0
    for score in lst:
        total = total + score
    return float(total)/size

# Get_average function
def get_average(student):
    homework = average(student["homework"])
    quiz = average(student["quizzes"])
    tests = average(student["tests"])
    return homework * 0.1 + quiz * 0.3 + tests * 0.6

# Get_letter_grade; score is a number
def get_letter_grade(score):
    if score >= 90:
        return "A"
    elif score >= 80:
        return "B"
    elif score >= 70:
        return "C"
    elif score >= 60:
        return "D"
    else: 
        return "F"

# Get_class_average; students is a list containing the 3
# students
def get_class_average(students):
    results = []
    for student in students:
        results.append(get_average(student))
    return average(results)

#test
class_lst = [lloyd, alice, tyler]

#for student in class_lst:
#    print get_average(student)

# Print Class average
print get_class_average(class_lst)
# Print Class Letter grade
print get_letter_grade(get_class_average(class_lst))

############################################
#------ Lesson: Lists and Functions
############################################
 
#########
#~~~10/18: Modifying an element of a list in a function
#########################################################
def list_function(x):
    #Add 3 to the item at index 1 and store result in index 1
    x[1] = x[1] + 3
    return x

n = [3, 5, 7]
print list_function(n)
#[3, 8, 7]

#########
#~~~12/18: Printing out a list item by item in a function
##########################################################
n = [3, 5, 7]

def print_list(x):
    for i in range(0, len(x)):
        print x[i]

print print_list(n)

#########
#~~~14/18: Passing a range into a function
##########################################################
def my_function(x):
    for i in range(0, len(x)):
        x[i] = x[i] * 2
    return x

print my_function(range(3)) 
#[0, 2, 4]

#########
#~~~15/18: Iterating over a List in a function
###############################################
n = [3, 5, 7]

def total(numbers):
    result = 0
    for i in range(len(numbers)):
        result += numbers[i]
    return result

print total(n)
#15

#########
#~~~17/18: Using two lists as two arguments in a function
##########################################################
m = [1, 2, 3]
n = [4, 5, 6]

# Add your code here!
def join_lists(x, y):
    return x + y

print join_lists(m, n)
# You want this to print [1, 2, 3, 4, 5, 6]

#########
#~~~18/18: Using a list of lists in a function
###############################################
n = [[1, 2, 3], [4, 5, 6, 7, 8, 9]]
# Add your function here
def flatten(lists):
    results = []
    for numbers in lists:
        for items in numbers:
            results.append(items)
    return results

print flatten(n)
#[1, 2, 3, 4, 5, 6, 7, 8, 9]

###################################################
#------ Lesson: Battleship
###################################################

#########
#---Making a 5x5 Grid using lists
###############################################
board = []

# Create a 5x5 grid of Os
for lst in range(5):
    board.append(["O"] * 5)

# Function to print board in a Grid
def print_board(board):
    for row in range(5):
        print board[row]

print_board(board)
#['O', 'O', 'O', 'O', 'O']
#['O', 'O', 'O', 'O', 'O']
#['O', 'O', 'O', 'O', 'O']
#['O', 'O', 'O', 'O', 'O']
#['O', 'O', 'O', 'O', 'O']

#Because print ['O'] * 5 
#= ['O', 'O', 'O', 'O', 'O']

############################################
#------ Lesson: Loops
############################################