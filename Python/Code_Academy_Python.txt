################################
##----------CODE ACADEMY--------
################################

#########################################
#------ Lesson: A Day At the Supermarket
#########################################

#########
#~~~3/13: Control Flow and Looping
#######################################
a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
even_list = []
#i = 0
for even in a:
    if even % 2 == 0:
        # "Even number in a is: %i" %even
        # "Len of list %i" %len(even_list)
        # CANNONT DO: even_list[i] = even
        # CANNOT DO: i = i + 1
        # even_list.append(even) //*If you want to save all the evens in a list
        print even
#print even_list //*If you want to save all the evens in a list

#########
#~~~4/13: Lists + Functions
#######################################
My Task)
Write a function that counts how many times the string "fizz" appears in a list.

Write a function called fizz_count that takes a list x as input.
Create a variable count to hold the ongoing count. Initialize it to zero.
for each item in x:, if that item is equal to the string "fizz" then increment the count variable.
After the loop, please return the count variable.
For example, fizz_count(["fizz","cat","fizz"]) should return 2.
---------------------------------------------------------------------------
# Write your function below!
def fizz_count(x):
    count = 0 #Initialize count to zero
    for item in x:
        if item == "fizz":
            count = count + 1
    return count

print fizz_count(["fizz","cat","fizz"])
# Returned 2

#########
#~~~4/13: String Looping
#######################################
As we've mentioned, strings are like lists with characters as elements. 
You can loop through strings the same way you loop through lists! 
While we won't ask you to do that in this section, we've put an example 
in the editor of how looping through a string might work.
####CODE
for letter in "Codecademy":
    print letter
    
# Empty lines to make the output pretty
print
print

word = "Programming is fun!"

for letter in word:
    # Only print out the letter i
    if letter == "i":
        print letter
        
####Output:
C
o
d
e
c
a
d
e
m
y


i
i
None

#########
#~~~9/13: Shopping at the Market
#######################################
# Dictionary of Prices
prices = {
    "banana": 4,
    "apple": 2,
    "orange": 1.5,
    "pear": 3
}

# Dictionary of Stock
stock = {
    "banana": 6,
    "apple": 0,
    "orange": 32,
    "pear": 15
}

## Since both dictionaries have the same keys, we can loop through
## one dictionary and show values from both of them.
# Loop through each key and list the price and stock amount
for key in prices.keys():
    print key #key name
    print "price: %s" % prices[key] #price
    print "stock: %s" % stock[key] #stock

#Total Value of inventory
total = 0
for key in prices:
    total = total + (prices[key] * stock[key])

print total

############################################
#------ Lesson: Student Becomes the Teacher
############################################
 
#########
#~~~6/9: How to continue on the next line
####################################### 
cost = {
    "apples": [3.5, 2.4, 2.3],
    "bananas": [1.2, 1.8],
}

return 0.9 * average(cost["apples"]) + \
0.1 * average(cost["bananas"])

The \ character is a continuation character. 
The following line is considered a continuation of the current line.

#########
#~~~9/9: Student Becomes the Teacher
####################################### 
lloyd = {
    "name": "Lloyd",
    "homework": [90.0, 97.0, 75.0, 92.0],
    "quizzes": [88.0, 40.0, 94.0],
    "tests": [75.0, 90.0]
}
alice = {
    "name": "Alice",
    "homework": [100.0, 92.0, 98.0, 100.0],
    "quizzes": [82.0, 83.0, 91.0],
    "tests": [89.0, 97.0]
}
tyler = {
    "name": "Tyler",
    "homework": [0.0, 87.0, 75.0, 22.0],
    "quizzes": [0.0, 75.0, 78.0],
    "tests": [100.0, 100.0]
}


# Add your function below!
def average(lst):
    size = len(lst)
    total = 0
    for score in lst:
        total = total + score
    return float(total)/size

# Get_average function
def get_average(student):
    homework = average(student["homework"])
    quiz = average(student["quizzes"])
    tests = average(student["tests"])
    return homework * 0.1 + quiz * 0.3 + tests * 0.6

# Get_letter_grade; score is a number
def get_letter_grade(score):
    if score >= 90:
        return "A"
    elif score >= 80:
        return "B"
    elif score >= 70:
        return "C"
    elif score >= 60:
        return "D"
    else: 
        return "F"

# Get_class_average; students is a list containing the 3
# students
def get_class_average(students):
    results = []
    for student in students:
        results.append(get_average(student))
    return average(results)

#test
class_lst = [lloyd, alice, tyler]

#for student in class_lst:
#    print get_average(student)

# Print Class average
print get_class_average(class_lst)
# Print Class Letter grade
print get_letter_grade(get_class_average(class_lst))

############################################
#------ Lesson: 
############################################
 
#########
#~~~6/9: 
####################################### 